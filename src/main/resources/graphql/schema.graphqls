type Query{
    languages: [Language!]
    lexemes(filters: [LexemesFilter!]): [Lexeme!]
}

input LexemesFilter{
    languageCode: String
    token: String
}

type Language{
    name: String
    shortIsoCode: String
}

type Lexeme{
    headword: String
    language: Language
    languageCode: String
    senses: [Sense!]
}

type Sense{
    languageCode: String
    headword: String
    ordinal: Int
    value: String
    properties: GrammaticalProperties
}

enum PartOfSpeech{
    NOUN, VERB, ADJECTIVE, ADVERB, PREPOSITION, ARTICLE, PRONOUN, CONJUNCTION
}

enum GrammaticalGender{
    FEMININE, MASCULINE, NEUTER
}

enum Transitivity{
    INTRANSITIVE, MONOTRANSITIVE, DITRANSITIVE, TRITRASITIVE
}

interface IGrammaticalProperties{
    partOfSpeech: PartOfSpeech
}

type NounProperties implements IGrammaticalProperties{
    partOfSpeech: PartOfSpeech
    gender: GrammaticalGender
}

type VerbProperties implements IGrammaticalProperties{
    partOfSpeech: PartOfSpeech
    transitivity: Transitivity
}

union GrammaticalProperties = NounProperties | VerbProperties
